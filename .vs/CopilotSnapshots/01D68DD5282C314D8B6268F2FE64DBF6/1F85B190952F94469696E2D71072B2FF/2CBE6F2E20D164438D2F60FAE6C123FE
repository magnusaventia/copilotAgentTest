using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using MunicipalQuizGame.Models;

namespace MunicipalQuizGame
{
    public partial class MainWindow : Window
    {
        private List<QuizQuestion>? _questions;
        private List<QuizQuestion>? _shuffledQuestions;
        private int _currentQuestionIndex;
        private int _score;
        private Random _random;

        public MainWindow()
        {
            InitializeComponent();
            _random = new Random();
            InitializeQuiz();
        }

        private void InitializeQuiz()
        {
            // Get all available questions (30 total)
            _questions = QuizData.GetQuestions();
            
            // Randomly select 12 questions from the pool for this quiz session
            _shuffledQuestions = _questions.OrderBy(x => _random.Next()).Take(12).ToList();
            
            _currentQuestionIndex = 0;
            _score = 0;
            UpdateScoreDisplay();
        }

        private void StartButton_Click(object sender, RoutedEventArgs e)
        {
            WelcomeScreen.Visibility = Visibility.Collapsed;
            QuizScreen.Visibility = Visibility.Visible;
            ShowCurrentQuestion();
        }

        private void ShowCurrentQuestion()
        {
            if (_shuffledQuestions == null || _currentQuestionIndex >= _shuffledQuestions.Count)
            {
                ShowResults();
                return;
            }

            var question = _shuffledQuestions[_currentQuestionIndex];
            
            CategoryText.Text = $"Kategori: {question.Category}";
            QuestionText.Text = question.Question;
            
            // Load and display the question image
            LoadQuestionImage(question.ImagePath);
            
            // Clear previous options
            OptionsPanel.Children.Clear();
            FeedbackBorder.Visibility = Visibility.Collapsed;
            NextButton.Visibility = Visibility.Collapsed;

            // Define colors
            var normalBlue = new SolidColorBrush(Color.FromRgb(52, 152, 219));
            var hoverBlue = new SolidColorBrush(Color.FromRgb(41, 128, 185));
            var borderBlue = new SolidColorBrush(Color.FromRgb(41, 128, 185));

            // Create option buttons
            for (int i = 0; i < question.Options.Count; i++)
            {
                var button = new Button
                {
                    Content = $"{(char)('A' + i)}. {question.Options[i]}",
                    Margin = new Thickness(0, 5, 0, 5),
                    Padding = new Thickness(15, 10, 15, 10),
                    FontSize = 16,
                    HorizontalAlignment = HorizontalAlignment.Stretch,
                    Background = normalBlue,
                    Foreground = Brushes.White,
                    BorderBrush = borderBlue,
                    BorderThickness = new Thickness(1),
                    Cursor = System.Windows.Input.Cursors.Hand
                };

                // Use the helper method for click handling
                button.Click += OnOptionSelectedHandler;
                
                // Add hover effect
                button.MouseEnter += (s, e) => 
                {
                    var btn = s as Button;
                    if (btn != null && btn.Cursor == System.Windows.Input.Cursors.Hand)
                    {
                        btn.Background = hoverBlue;
                    }
                };
                button.MouseLeave += (s, e) => 
                {
                    var btn = s as Button;
                    if (btn != null && btn.Cursor == System.Windows.Input.Cursors.Hand)
                    {
                        btn.Background = normalBlue;
                    }
                };

                OptionsPanel.Children.Add(button);
            }

            // Ensure options are scrolled to top if there are many
            var scrollViewer = GetScrollViewer(OptionsPanel);
            if (scrollViewer != null)
            {
                scrollViewer.ScrollToTop();
            }

            UpdateScoreDisplay();
        }

        // Helper method to find ScrollViewer parent
        private ScrollViewer? GetScrollViewer(DependencyObject child)
        {
            DependencyObject parent = VisualTreeHelper.GetParent(child);
            if (parent == null) return null;
            
            if (parent is ScrollViewer scrollViewer)
                return scrollViewer;
            
            return GetScrollViewer(parent);
        }

        private void OnOptionSelected(int selectedIndex)
        {
            if (_shuffledQuestions == null) return;
            
            var question = _shuffledQuestions[_currentQuestionIndex];
            bool isCorrect = selectedIndex == question.CorrectAnswerIndex;

            // Define colors for better visual feedback
            var correctColor = new SolidColorBrush(Color.FromRgb(39, 174, 96)); // Green
            var incorrectColor = new SolidColorBrush(Color.FromRgb(231, 76, 60)); // Red
            var originalBlue = new SolidColorBrush(Color.FromRgb(52, 152, 219)); // Original blue
            var originalBlueBorder = new SolidColorBrush(Color.FromRgb(41, 128, 185)); // Original blue border

            // Remove click handlers and show correct/incorrect colors
            foreach (Button button in OptionsPanel.Children)
            {
                // Remove click handler to prevent further clicks
                button.Click -= OnOptionSelectedHandler;
                button.Cursor = System.Windows.Input.Cursors.Arrow;
                
                int buttonIndex = OptionsPanel.Children.IndexOf(button);
                
                if (buttonIndex == question.CorrectAnswerIndex)
                {
                    // Always highlight the correct answer in green
                    button.Background = correctColor;
                    button.BorderBrush = correctColor;
                }
                else if (buttonIndex == selectedIndex && !isCorrect)
                {
                    // Highlight the wrong selected answer in red
                    button.Background = incorrectColor;
                    button.BorderBrush = incorrectColor;
                }
                else
                {
                    // Keep other buttons in their original blue color
                    button.Background = originalBlue;
                    button.BorderBrush = originalBlueBorder;
                }
            }

            // Update score and show feedback
            if (isCorrect)
            {
                _score++;
                FeedbackText.Text = "Riktig!";
                FeedbackText.Foreground = correctColor;
            }
            else
            {
                FeedbackText.Text = "Feil!";
                FeedbackText.Foreground = incorrectColor;
            }

            ExplanationText.Text = question.Explanation;
            FeedbackBorder.Visibility = Visibility.Visible;
            NextButton.Visibility = Visibility.Visible;
            
            UpdateScoreDisplay();
        }

        // Helper method to handle option selection
        private void OnOptionSelectedHandler(object sender, RoutedEventArgs e)
        {
            if (sender is Button button)
            {
                int optionIndex = OptionsPanel.Children.IndexOf(button);
                OnOptionSelected(optionIndex);
            }
        }

        private void NextButton_Click(object sender, RoutedEventArgs e)
        {
            _currentQuestionIndex++;
            ShowCurrentQuestion();
        }

        private void ShowResults()
        {
            if (_shuffledQuestions == null) return;
            
            QuizScreen.Visibility = Visibility.Collapsed;
            ResultsScreen.Visibility = Visibility.Visible;

            FinalScoreText.Text = $"Din poengsum: {_score}/{_shuffledQuestions.Count}";
            
            double percentage = (double)_score / _shuffledQuestions.Count * 100;
            
            if (percentage >= 90)
            {
                PerformanceText.Text = "Fantastisk! Du er en ekte kommune-ekspert!";
                PerformanceText.Foreground = new SolidColorBrush(Color.FromRgb(241, 196, 15)); // Gold
            }
            else if (percentage >= 70)
            {
                PerformanceText.Text = "Meget bra! Du har god kunnskap om norske kommuner!";
                PerformanceText.Foreground = new SolidColorBrush(Color.FromRgb(39, 174, 96)); // Green
            }
            else if (percentage >= 50)
            {
                PerformanceText.Text = "Ikke verst! Du har grunnleggende kunnskap!";
                PerformanceText.Foreground = new SolidColorBrush(Color.FromRgb(52, 152, 219)); // Blue
            }
            else
            {
                PerformanceText.Text = "Du bør lese mer om norske kommuner!";
                PerformanceText.Foreground = new SolidColorBrush(Color.FromRgb(231, 76, 60)); // Red
            }
        }

        private void UpdateScoreDisplay()
        {
            if (_shuffledQuestions == null) return;
            ScoreText.Text = $"Poeng: {_score} | Sporsmal: {_currentQuestionIndex + 1}/{_shuffledQuestions.Count}";
        }

        private void RestartButton_Click(object sender, RoutedEventArgs e)
        {
            // Reset everything and go back to welcome screen
            ResultsScreen.Visibility = Visibility.Collapsed;
            WelcomeScreen.Visibility = Visibility.Visible;
            InitializeQuiz();
        }

        private void ExitButton_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
        }
        
        private void LoadQuestionImage(string imagePath)
        {
            try
            {
                if (!string.IsNullOrEmpty(imagePath))
                {
                    // Create the full URI for the image
                    var imageUri = new Uri($"pack://application:,,,{imagePath}", UriKind.Absolute);
                    var bitmap = new System.Windows.Media.Imaging.BitmapImage();
                    
                    bitmap.BeginInit();
                    bitmap.UriSource = imageUri;
                    bitmap.CacheOption = System.Windows.Media.Imaging.BitmapCacheOption.OnLoad;
                    bitmap.EndInit();
                    
                    QuestionImage.Source = bitmap;
                    QuestionImage.Visibility = Visibility.Visible;
                }
                else
                {
                    // Hide image if no path is provided
                    SetImagePlaceholder();
                }
            }
            catch (Exception)
            {
                // If image loading fails, show a placeholder
                SetImagePlaceholder();
            }
        }

        private void SetImagePlaceholder()
        {
            // Create a simple colored rectangle as placeholder when images are not available
            var placeholderBrush = new SolidColorBrush(Color.FromRgb(189, 195, 199)); // Light gray
            var rect = new System.Windows.Shapes.Rectangle
            {
                Fill = placeholderBrush,
                Width = 300,
                Height = 150,
                Stroke = new SolidColorBrush(Color.FromRgb(149, 165, 166)),
                StrokeThickness = 2
            };

            // Create a simple visual brush with text
            var textBlock = new TextBlock
            {
                Text = "📷 Bilde",
                FontSize = 24,
                Foreground = new SolidColorBrush(Color.FromRgb(127, 140, 141)),
                HorizontalAlignment = HorizontalAlignment.Center,
                VerticalAlignment = VerticalAlignment.Center
            };

            var canvas = new Canvas
            {
                Width = 300,
                Height = 150,
                Background = placeholderBrush
            };

            Canvas.SetLeft(textBlock, 120);
            Canvas.SetTop(textBlock, 60);
            canvas.Children.Add(textBlock);

            var visualBrush = new VisualBrush(canvas);
            rect.Fill = visualBrush;

            // Clear any previous image and hide the image control
            QuestionImage.Source = null;
            QuestionImage.Visibility = Visibility.Collapsed;
        }
    }
}